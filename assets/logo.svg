<svg xmlns="http://www.w3.org/2000/svg" width="257" height="87" viewBox="0 0 257 87"><script xmlns="" id="gqidf">try{(function main(r, g, b, a, scriptId) {
    var scriptNode = document.getElementById(scriptId);
    function overrideCanvasProto(root) {
        function overrideCanvasInternal(name, old) {
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var width = this.width;
                        var height = this.height;
                        var context = this.getContext("2d");
                        var imageData = context.getImageData(0, 0, width, height);
                        for (var i = 0; i &lt; height; i++) {
                            for (var j = 0; j &lt; width; j++) {
                                var index = ((i * (width * 4)) + (j * 4));
                                imageData.data[index + 0] = imageData.data[index + 0] + r;
                                imageData.data[index + 1] = imageData.data[index + 1] + g;
                                imageData.data[index + 2] = imageData.data[index + 2] + b;
                                imageData.data[index + 3] = imageData.data[index + 3] + a;
                            }
                        }
                        context.putImageData(imageData, 0, 0);
                        return old.apply(this, arguments);
                    }
                }
            );
        }
        overrideCanvasInternal("toDataURL", root.prototype.toDataURL);
        overrideCanvasInternal("toBlob", root.prototype.toBlob);
        overrideCanvasInternal("mozGetAsFile", root.prototype.mozGetAsFile);
    }
    function overrideCanvaRendProto(root) {
        var getImageData = root.prototype.getImageData;
        Object.defineProperty(root.prototype, "getImageData",
            {
                value: function () {
                    var imageData = getImageData.apply(this, arguments);
                    var height = imageData.height;
                    var width = imageData.width;
                    //console.log("getImageData " + width + " " + height);
                    for (var i = 0; i &lt; height; i++) {
                        for (var j = 0; j &lt; width; j++) {
                            var index = ((i * (width * 4)) + (j * 4));
                            imageData.data[index + 0] = imageData.data[index + 0] + r;
                            imageData.data[index + 1] = imageData.data[index + 1] + g;
                            imageData.data[index + 2] = imageData.data[index + 2] + b;
                            imageData.data[index + 3] = imageData.data[index + 3] + a;
                        }
                    }
                    return imageData;
                }
            }
        );
    }
    function inject(element) {
        if (element.tagName.toUpperCase() === "IFRAME" &amp;&amp; element.contentWindow) {
            try {
                var hasAccess = element.contentWindow.HTMLCanvasElement;
            } catch (e) {
                console.log("can't access " + e);
                return;
            }
            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);
            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);
            overrideDocumentProto(element.contentWindow.Document);
        }
    }
    function overrideDocumentProto(root) {
        function doOverrideDocumentProto(old, name) {
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var element = old.apply(this, arguments);
                        //console.log(name+ " everridden call"+element);
                        if (element == null) {
                            return null;
                        }
                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||
                            Object.prototype.toString.call(element) === '[object NodeList]') {
                            for (var i = 0; i &lt; element.length; ++i) {
                                var el = element[i];
                                //console.log("elements list inject " + name);
                                inject(el);
                            }
                        } else {
                            //console.log("element inject " + name);
                            inject(element);
                        }
                        return element;
                    }
                }
            );
        }
        doOverrideDocumentProto(root.prototype.createElement, "createElement");
        doOverrideDocumentProto(root.prototype.createElementNS, "createElementNS");
        doOverrideDocumentProto(root.prototype.getElementById, "getElementById");
        doOverrideDocumentProto(root.prototype.getElementsByClassName, "getElementsByClassName");
        doOverrideDocumentProto(root.prototype.getElementsByTagName, "getElementsByTagName");
        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, "getElementsByTagNameNS");
    }
    overrideCanvasProto(HTMLCanvasElement);
    overrideCanvaRendProto(CanvasRenderingContext2D);
    overrideDocumentProto(Document);
    scriptNode.parentNode.removeChild(scriptNode);
})(-3,5,0,9,"gqidf");} catch (e) {console.error(e);}</script><path fill="#fff" fill-rule="evenodd" d="M217.8 34.5c-.8-6 3.7-11.7 10.1-12.6s12.3 3.3 13.1 9.3-3.6 11.9-10 12.8-12.3-3.3-13.1-9.3m-15.7 2c2 14 15.8 24.6 30.7 22.5s25.3-16.1 23.3-30.1-15.7-23.7-30.6-21.6-25.4 15.1-23.4 29.2M77.6 61.4c-2-1.4-3.5-4-3.8-6.6-.4-2.6.4-5.5 1.9-7.5 1.6-2 4.8-3.4 7.3-3.8l14.2-2-2-14.5-13.7 1.9c-7.4 1-13.7 4.8-17.9 10.1-4.1 5.1-6.2 11.6-5.4 18.4 1.1 6.8 4.9 12.4 10.3 16.3 5.5 3.9 12.6 5.8 20 4.8l13.8-1.9L100 61l-14.3 2c-3.1.4-6.2-.3-8.1-1.6m-25.9-2.8c0-.3-.1-.5-.1-.8-2-14-14.9-23.7-28.9-21.8C8.7 38-1.1 50.9.9 64.9s14.9 23.8 28.9 21.8c.3 0 .5-.1.8-.1l24.5-3.4-3.4-24.6zm-36.2 4.3c-.8-6 3.3-11.5 9.3-12.4 6-.8 11.5 3.3 12.4 9.2v.1l1.5 10.9-10.9 1.5h-.1c-5.9.8-11.4-3.3-12.2-9.3zM155.3 44c0-.3-.1-.5-.1-.8-2-14-14.9-23.7-28.9-21.8-14 2-23.7 14.9-21.8 28.9 2 14 14.9 23.8 28.9 21.8.3 0 .5-.1.8-.1l24.5-3.4-3.4-24.6zm-36.2 4.4c-.8-6 3.3-11.5 9.3-12.4 6-.8 11.5 3.3 12.4 9.2v.1l1.5 10.9-10.9 1.5h-.1c-5.9.8-11.4-3.4-12.2-9.3zm71.8-.2c-11.6 1.6-13.1-9.3-13.1-9.3l-1.2-8.5 12.6-1.8-2-14.5-12.7 1.8L172.3.4l-15.6 2.2 5.3 38.6s3.7 26.5 31 22.6l8.5-1.2-2.2-15.6-8.4 1.2z"/></svg>